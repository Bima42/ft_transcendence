// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int        @id @unique @default(autoincrement())
  twoFA              Boolean    @default(false)
  twoFAAuthenticated Boolean    @default(false)
  twoFASecret        String?
  fortyTwoId         Int?
  username           String     @unique @db.VarChar(255)
  email              String     @unique
  avatar             String     @default("")
  firstName          String?
  lastName           String?
  phone              String?
  status             UserStatus @default(OFFLINE)

  elo Int @default(800)

  chats    UserChat[]
  games    UserGame[]
  messages ChatMessage[]

  friendshipAsked    Friendship[] @relation(name: "requester")
  friendshipReceived Friendship[] @relation(name: "receiver")
  blockers           User[]       @relation(name: "blocked")
  blocked            User[]       @relation(name: "blocked")
}

model Friendship {
  id       Int              @id @unique @default(autoincrement())
  status   FriendshipStatus @default(PENDING)
  user     User             @relation(name: "requester", fields: [userId], references: [id])
  userId   Int
  friend   User             @relation(name: "receiver", fields: [friendId], references: [id])
  friendId Int

  @@unique([userId, friendId])
}

model Chat {
  id        Int           @id @unique @default(autoincrement())
  type      ChatType      @default(PUBLIC)
  name      String?
  password  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  ChatMessage[]
  users     UserChat[]
}

model UserChat {
  id         Int          @id @unique @default(autoincrement())
  mutedUntil DateTime?
  role       UserChatRole @default(MEMBER)
  chat       Chat         @relation(fields: [chatId], references: [id])
  chatId     Int
  user       User         @relation(fields: [userId], references: [id])
  userId     Int

  @@unique([userId, chatId])
}

model ChatMessage {
  id        Int      @id @unique @default(autoincrement())
  content   String
  sentAt    DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
}

model UserGame {
  id     Int  @id @unique @default(autoincrement())
  game   Game @relation(fields: [gameId], references: [id])
  gameId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int
  score  Int  @default(0)
  win    Int  @default(0)
  elo    Int  @default(0)
}

model Game {
  id        Int        @id @unique @default(autoincrement())
  type      GameType   @default(CLASSIC)
  status    GameStatus @default(SEARCHING)
  createdAt DateTime   @default(now())
  endedAt   DateTime?
  users     UserGame[]
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELED
}

enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
  BUSY
}

enum ChatType {
  PUBLIC
  PRIVATE
  WHISPER
  GAMECHAT
}

enum UserChatRole {
  OWNER
  ADMIN
  MEMBER
  BANNED
}

enum GameStatus {
  SEARCHING
  INVITING
  STARTED
  ENDED
  ABORTED
}

enum GameType {
  CLASSIC
  CUSTOM
}
