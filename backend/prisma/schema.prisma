// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @unique @default(autoincrement())
  twoFA       Boolean       @default(false)
  fortyTwoId  Int?
  username    String        @unique @db.VarChar(255)
  email       String        @unique
  avatar      String?
  firstName   String?
  lastName    String?
  phoneNumber String?
  status      UserStatus    @default(OFFLINE)
  chats       UserChat[]
  games       UserGame[]
  messages    ChatMessage[]

  friendRequest Friendship[] @relation(name: "requester")
  friends       Friendship[] @relation(name: "receiver")
  blockers      User[]       @relation(name: "blocked")
  blocked       User[]       @relation(name: "blocked")
}

model Friendship {
  id       Int              @id @unique @default(autoincrement())
  status   FriendshipStatus @default(PENDING)
  user     User             @relation(name: "requester", fields: [userId], references: [id])
  userId   Int
  friend   User             @relation(name: "receiver", fields: [friendId], references: [id])
  friendId Int

  @@unique([userId, friendId])
}

model Chat {
  id        Int           @id @unique @default(autoincrement())
  type      ChatType      @default(PUBLIC)
  name      String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  ChatMessage[]
  users     UserChat[]
}

model UserChat {
  id         Int          @id @unique @default(autoincrement())
  mutedUntil DateTime?
  role       UserChatRole @default(MEMBER)
  chat       Chat         @relation(fields: [chatId], references: [id])
  chatId     Int
  user       User         @relation(fields: [userId], references: [id])
  userId     Int
}

model ChatMessage {
  id        Int      @id @unique @default(autoincrement())
  content   String
  sentAt    DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
}

model UserGame {
  id     Int  @id @unique @default(autoincrement())
  game   Game @relation(fields: [gameId], references: [id])
  gameId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Game {
  id        Int        @id @unique @default(autoincrement())
  status    GameStatus @default(SEARCHING)
  createdAt DateTime   @default(now())
  endedAt   DateTime?
  users     UserGame[]
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
  BUSY
}

enum ChatType {
  PUBLIC
  PRIVATE
  GAMECHAT
}

enum UserChatRole {
  MEMBER
  ADMIN
  BANNED
}

enum GameStatus {
  SEARCHING
  STARTED
  ENDED
}
